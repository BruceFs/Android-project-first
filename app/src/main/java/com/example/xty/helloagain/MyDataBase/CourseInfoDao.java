package com.example.xty.helloagain.MyDataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COURSE_INFO".
*/
public class CourseInfoDao extends AbstractDao<CourseInfo, Long> {

    public static final String TABLENAME = "COURSE_INFO";

    /**
     * Properties of entity CourseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClassName = new Property(1, String.class, "className", false, "className");
        public final static Property ClassNumber = new Property(2, String.class, "classNumber", false, "classNumber");
        public final static Property TeacherName = new Property(3, String.class, "teacherName", false, "teacherName");
        public final static Property Tel = new Property(4, String.class, "tel", false, "tel");
        public final static Property StudentNumber = new Property(5, String.class, "studentNumber", false, "studentNumber");
        public final static Property WeekNumber = new Property(6, String.class, "weekNumber", false, "weekNumber");
        public final static Property Weekday = new Property(7, String.class, "weekday", false, "weekday");
        public final static Property StartWeek = new Property(8, String.class, "startWeek", false, "startWeek");
        public final static Property EndWeek = new Property(9, String.class, "endWeek", false, "endWeek");
        public final static Property StartClass = new Property(10, String.class, "startClass", false, "startClass");
        public final static Property EndClass = new Property(11, String.class, "endClass", false, "endClass");
    };


    public CourseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CourseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"className\" TEXT," + // 1: className
                "\"classNumber\" TEXT," + // 2: classNumber
                "\"teacherName\" TEXT," + // 3: teacherName
                "\"tel\" TEXT," + // 4: tel
                "\"studentNumber\" TEXT," + // 5: studentNumber
                "\"weekNumber\" TEXT," + // 6: weekNumber
                "\"weekday\" TEXT," + // 7: weekday
                "\"startWeek\" TEXT," + // 8: startWeek
                "\"endWeek\" TEXT," + // 9: endWeek
                "\"startClass\" TEXT," + // 10: startClass
                "\"endClass\" TEXT);"); // 11: endClass
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(2, className);
        }
 
        String classNumber = entity.getClassNumber();
        if (classNumber != null) {
            stmt.bindString(3, classNumber);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(4, teacherName);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String studentNumber = entity.getStudentNumber();
        if (studentNumber != null) {
            stmt.bindString(6, studentNumber);
        }
 
        String weekNumber = entity.getWeekNumber();
        if (weekNumber != null) {
            stmt.bindString(7, weekNumber);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(8, weekday);
        }
 
        String startWeek = entity.getStartWeek();
        if (startWeek != null) {
            stmt.bindString(9, startWeek);
        }
 
        String endWeek = entity.getEndWeek();
        if (endWeek != null) {
            stmt.bindString(10, endWeek);
        }
 
        String startClass = entity.getStartClass();
        if (startClass != null) {
            stmt.bindString(11, startClass);
        }
 
        String endClass = entity.getEndClass();
        if (endClass != null) {
            stmt.bindString(12, endClass);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(2, className);
        }
 
        String classNumber = entity.getClassNumber();
        if (classNumber != null) {
            stmt.bindString(3, classNumber);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(4, teacherName);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String studentNumber = entity.getStudentNumber();
        if (studentNumber != null) {
            stmt.bindString(6, studentNumber);
        }
 
        String weekNumber = entity.getWeekNumber();
        if (weekNumber != null) {
            stmt.bindString(7, weekNumber);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(8, weekday);
        }
 
        String startWeek = entity.getStartWeek();
        if (startWeek != null) {
            stmt.bindString(9, startWeek);
        }
 
        String endWeek = entity.getEndWeek();
        if (endWeek != null) {
            stmt.bindString(10, endWeek);
        }
 
        String startClass = entity.getStartClass();
        if (startClass != null) {
            stmt.bindString(11, startClass);
        }
 
        String endClass = entity.getEndClass();
        if (endClass != null) {
            stmt.bindString(12, endClass);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CourseInfo readEntity(Cursor cursor, int offset) {
        CourseInfo entity = new CourseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // className
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // classNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // teacherName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // studentNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weekNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weekday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // startWeek
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // endWeek
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // startClass
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // endClass
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClassNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTeacherName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStudentNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeekNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeekday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartWeek(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEndWeek(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartClass(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEndClass(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CourseInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CourseInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
