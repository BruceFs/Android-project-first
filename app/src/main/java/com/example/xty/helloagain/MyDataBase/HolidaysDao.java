package com.example.xty.helloagain.MyDataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HOLIDAYS".
*/
public class HolidaysDao extends AbstractDao<Holidays, Long> {

    public static final String TABLENAME = "HOLIDAYS";

    /**
     * Properties of entity Holidays.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WeekNumber = new Property(1, String.class, "weekNumber", false, "weekNumber");
        public final static Property WeekDay = new Property(2, String.class, "weekDay", false, "weekDay");
    };


    public HolidaysDao(DaoConfig config) {
        super(config);
    }
    
    public HolidaysDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOLIDAYS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"weekNumber\" TEXT," + // 1: weekNumber
                "\"weekDay\" TEXT);"); // 2: weekDay
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOLIDAYS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Holidays entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String weekNumber = entity.getWeekNumber();
        if (weekNumber != null) {
            stmt.bindString(2, weekNumber);
        }
 
        String weekDay = entity.getWeekDay();
        if (weekDay != null) {
            stmt.bindString(3, weekDay);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Holidays entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String weekNumber = entity.getWeekNumber();
        if (weekNumber != null) {
            stmt.bindString(2, weekNumber);
        }
 
        String weekDay = entity.getWeekDay();
        if (weekDay != null) {
            stmt.bindString(3, weekDay);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Holidays readEntity(Cursor cursor, int offset) {
        Holidays entity = new Holidays( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // weekNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // weekDay
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Holidays entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeekNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeekDay(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Holidays entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Holidays entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
